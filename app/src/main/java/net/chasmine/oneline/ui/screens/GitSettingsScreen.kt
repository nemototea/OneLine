package net.chasmine.oneline.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Help
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import net.chasmine.oneline.ui.viewmodels.SettingsViewModel
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GitSettingsScreen(
    onNavigateBack: () -> Unit,
    viewModel: SettingsViewModel = viewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    val scope = rememberCoroutineScope()

    var repoUrl by remember { mutableStateOf("") }
    var username by remember { mutableStateOf("") }
    var token by remember { mutableStateOf("") }

    var showSuccessDialog by remember { mutableStateOf(false) }
    var showErrorDialog by remember { mutableStateOf(false) }
    var showRepositoryChangeDialog by remember { mutableStateOf(false) }
    var showMigrationOptionsDialog by remember { mutableStateOf(false) }
    var localDiaryCount by remember { mutableStateOf(0) }
    var showValidationDialog by remember { mutableStateOf(false) }
    var showCreateRepoHelpDialog by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }
    var validationMessage by remember { mutableStateOf("") }
    var validationResult by remember { mutableStateOf<net.chasmine.oneline.data.git.GitRepository.ValidationResult?>(null) }
    var isValidationPassed by remember { mutableStateOf(false) }
    var pendingRepoUrl by remember { mutableStateOf("") }

    LaunchedEffect(uiState) {
        when (val state = uiState) {
            is SettingsViewModel.UiState.Loaded -> {
                repoUrl = state.repoUrl
                username = state.username
                token = state.token
            }
            is SettingsViewModel.UiState.SaveSuccess -> {
                showSuccessDialog = true
            }
            is SettingsViewModel.UiState.Error -> {
                errorMessage = state.message
                showErrorDialog = true
            }
            is SettingsViewModel.UiState.ValidationResult -> {
                validationResult = state.result
                validationMessage = state.message
                isValidationPassed = when (state.result) {
                    net.chasmine.oneline.data.git.GitRepository.ValidationResult.DIARY_REPOSITORY,
                    net.chasmine.oneline.data.git.GitRepository.ValidationResult.LIKELY_DIARY_REPOSITORY,
                    net.chasmine.oneline.data.git.GitRepository.ValidationResult.EMPTY_REPOSITORY -> true
                    else -> false
                }
                showValidationDialog = true
            }
            else -> {}
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("„Éá„Éº„ÇøÂêåÊúüË®≠ÂÆö") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Êàª„Çã"
                        )
                    }
                },
                actions = {
                    IconButton(onClick = { showCreateRepoHelpDialog = true }) {
                        Icon(
                            imageVector = Icons.Default.Help,
                            contentDescription = "„Éò„É´„Éó"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        when (uiState) {
            is SettingsViewModel.UiState.Loading -> {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                }
            }
            else -> {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues)
                        .padding(16.dp)
                        .verticalScroll(rememberScrollState()),
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    // Ë™¨Êòé„Ç´„Éº„Éâ
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                        )
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = "üí° ÈáçË¶Å",
                                style = MaterialTheme.typography.titleSmall,
                                color = MaterialTheme.colorScheme.primary
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "Êó•Ë®òÂ∞ÇÁî®„ÅÆ„É™„Éù„Ç∏„Éà„É™„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÊó¢Â≠ò„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É™„Éù„Ç∏„Éà„É™„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                    }

                    // GitË®≠ÂÆö„Éï„Ç©„Éº„É†
                    OutlinedTextField(
                        value = repoUrl,
                        onValueChange = { 
                            repoUrl = it
                            isValidationPassed = false
                        },
                        label = { Text("Êó•Ë®ò„É™„Éù„Ç∏„Éà„É™URL") },
                        placeholder = { Text("https://github.com/username/my-diary.git") },
                        modifier = Modifier.fillMaxWidth(),
                        supportingText = {
                            Text("Êó•Ë®ò„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åô„ÇãGitHub„É™„Éù„Ç∏„Éà„É™„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                        }
                    )

                    OutlinedTextField(
                        value = username,
                        onValueChange = { 
                            username = it
                            isValidationPassed = false
                        },
                        label = { Text("„É¶„Éº„Ç∂„ÉºÂêç") },
                        modifier = Modifier.fillMaxWidth()
                    )

                    OutlinedTextField(
                        value = token,
                        onValueChange = { 
                            token = it
                            isValidationPassed = false
                        },
                        label = { Text("„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥") },
                        visualTransformation = PasswordVisualTransformation(),
                        modifier = Modifier.fillMaxWidth()
                    )

                    // Ê§úË®º„Éú„Çø„É≥
                    Button(
                        onClick = {
                            scope.launch {
                                viewModel.validateRepository(repoUrl, username, token)
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        enabled = repoUrl.isNotEmpty() && username.isNotEmpty() && token.isNotEmpty() && 
                                 uiState !is SettingsViewModel.UiState.Validating,
                        colors = ButtonDefaults.buttonColors(
                            containerColor = if (isValidationPassed) 
                                MaterialTheme.colorScheme.primary 
                            else 
                                MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        if (uiState is SettingsViewModel.UiState.Validating) {
                            CircularProgressIndicator(
                                modifier = Modifier.size(16.dp),
                                strokeWidth = 2.dp,
                                color = MaterialTheme.colorScheme.onPrimary
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text("Ê§úË®º‰∏≠...")
                        } else if (isValidationPassed) {
                            Text("‚úÖ Ê§úË®ºÊ∏à„Åø - ÂÜçÊ§úË®º")
                        } else {
                            Text("üîç „É™„Éù„Ç∏„Éà„É™„ÇíÊ§úË®º")
                        }
                    }

                    // Ê§úË®ºÁä∂ÊÖã„ÅÆË°®Á§∫
                    if (isValidationPassed) {
                        Card(
                            modifier = Modifier.fillMaxWidth(),
                            colors = CardDefaults.cardColors(
                                containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                            )
                        ) {
                            Row(
                                modifier = Modifier.padding(16.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = "‚úÖ",
                                    style = MaterialTheme.typography.titleMedium
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = "„É™„Éù„Ç∏„Éà„É™„ÅÆÊ§úË®º„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇË®≠ÂÆö„Çí‰øùÂ≠ò„Åß„Åç„Åæ„Åô„ÄÇ",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.primary
                                )
                            }
                        }
                    }

                    // ‰øùÂ≠ò„Éú„Çø„É≥
                    Button(
                        onClick = {
                            val currentRepoUrl = if (uiState is SettingsViewModel.UiState.Loaded) {
                                (uiState as SettingsViewModel.UiState.Loaded).repoUrl
                            } else ""
                            
                            if (currentRepoUrl.isNotEmpty() && currentRepoUrl != repoUrl) {
                                pendingRepoUrl = repoUrl
                                showRepositoryChangeDialog = true
                            } else {
                                scope.launch {
                                    viewModel.saveSettings(repoUrl, username, token)
                                }
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        enabled = isValidationPassed && uiState !is SettingsViewModel.UiState.Saving
                    ) {
                        if (isValidationPassed) {
                            Text("Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åô„Çã")
                        } else {
                            Text("„Åæ„Åö„É™„Éù„Ç∏„Éà„É™„ÇíÊ§úË®º„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
                        }
                    }

                    Text(
                        text = "‚Äª Git„É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Å´„ÅØ„ÄÅGitHub„Å™„Å©„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
        }

        // ÂêÑÁ®Æ„ÉÄ„Ç§„Ç¢„É≠„Ç∞
        
        // ÊàêÂäü„ÉÄ„Ç§„Ç¢„É≠„Ç∞
        if (showSuccessDialog) {
            AlertDialog(
                onDismissRequest = { showSuccessDialog = false },
                title = { Text("‚úÖ Ë®≠ÂÆöÂÆå‰∫Ü") },
                text = { Text("GitË®≠ÂÆö„ÅåÊ≠£Â∏∏„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü„ÄÇ") },
                confirmButton = {
                    TextButton(onClick = { showSuccessDialog = false }) {
                        Text("OK")
                    }
                }
            )
        }

        // „Ç®„É©„Éº„ÉÄ„Ç§„Ç¢„É≠„Ç∞
        if (showErrorDialog) {
            AlertDialog(
                onDismissRequest = { showErrorDialog = false },
                title = { Text("‚ùå „Ç®„É©„Éº") },
                text = { Text(errorMessage) },
                confirmButton = {
                    TextButton(onClick = { showErrorDialog = false }) {
                        Text("OK")
                    }
                }
            )
        }

        // Ê§úË®ºÁµêÊûú„ÉÄ„Ç§„Ç¢„É≠„Ç∞
        if (showValidationDialog) {
            AlertDialog(
                onDismissRequest = { showValidationDialog = false },
                title = { Text("„É™„Éù„Ç∏„Éà„É™Ê§úË®ºÁµêÊûú") },
                text = { Text(validationMessage) },
                confirmButton = {
                    TextButton(onClick = { showValidationDialog = false }) {
                        Text("OK")
                    }
                }
            )
        }

        // „Éò„É´„Éó„ÉÄ„Ç§„Ç¢„É≠„Ç∞
        if (showCreateRepoHelpDialog) {
            AlertDialog(
                onDismissRequest = { showCreateRepoHelpDialog = false },
                title = { Text("üìñ Êó•Ë®ò„É™„Éù„Ç∏„Éà„É™„ÅÆË®≠ÂÆö„Ç¨„Ç§„Éâ") },
                text = {
                    Column(
                        modifier = Modifier.verticalScroll(rememberScrollState())
                    ) {
                        Text(
                            text = "GitHub„ÅßÊó•Ë®òÂ∞ÇÁî®„ÅÆ„Éó„É©„Ç§„Éô„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                            style = MaterialTheme.typography.bodyMedium
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "1. GitHub„Å´„É≠„Ç∞„Ç§„É≥„Åó„ÄÅÊñ∞„Åó„ÅÑ„É™„Éù„Ç∏„Éà„É™„Çí‰ΩúÊàê\n2. „É™„Éù„Ç∏„Éà„É™Âêç„ÇíË®≠ÂÆöÔºà‰æã: my-diaryÔºâ\n3. „Éó„É©„Ç§„Éô„Éº„Éà„É™„Éù„Ç∏„Éà„É™„Å´Ë®≠ÂÆö\n4. README„Éï„Ç°„Ç§„É´„ÅßÂàùÊúüÂåñ\n5. Personal Access Token„Çí‰ΩúÊàê",
                            style = MaterialTheme.typography.bodySmall
                        )
                    }
                },
                confirmButton = {
                    TextButton(onClick = { showCreateRepoHelpDialog = false }) {
                        Text("Èñâ„Åò„Çã")
                    }
                }
            )
        }
        
        if (uiState is SettingsViewModel.UiState.Saving) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.surface.copy(alpha = 0.8f)
                ) {}
                
                Card(
                    modifier = Modifier.padding(32.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                    ),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
                ) {
                    Column(
                        modifier = Modifier.padding(24.dp),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(40.dp),
                            strokeWidth = 4.dp
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "‰øùÂ≠ò‰∏≠...",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }
        }
    }
}
