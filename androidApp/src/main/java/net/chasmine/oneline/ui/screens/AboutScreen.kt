package net.chasmine.oneline.ui.screens

import android.content.Intent
import android.net.Uri
import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.draw.scale
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.airbnb.lottie.compose.*
import kotlinx.coroutines.launch
import net.chasmine.oneline.R
import net.chasmine.oneline.data.preferences.SettingsManager

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AboutScreen(
    onNavigateBack: () -> Unit
) {
    val context = LocalContext.current
    val repositoryUrl = "https://github.com/nemototea/OneLine"
    val settingsManager = remember { SettingsManager.getInstance(context) }
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }

    // ÈñãÁô∫ËÄÖ„É¢„Éº„Éâ„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó
    val isDeveloperMode by settingsManager.isDeveloperMode.collectAsState(initial = false)

    // „Ç§„Éº„Çπ„Çø„Éº„Ç®„ÉÉ„Ç∞Áî®„ÅÆÁä∂ÊÖãÂ§âÊï∞
    var tapCount by remember { mutableIntStateOf(0) }
    var showEasterEgg by remember { mutableStateOf(false) }
    val interactionSource = remember { MutableInteractionSource() }

    // „Ç¢„Ç§„Ç≥„É≥„ÅÆ„Éê„Ç¶„É≥„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    val scale by animateFloatAsState(
        targetValue = if (tapCount > 0 && tapCount < 7) 1.1f else 1f,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessLow
        ),
        label = "iconScale"
    )

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("„Ç¢„Éó„É™„Å´„Å§„ÅÑ„Å¶") },
                windowInsets = WindowInsets(0, 0, 0, 0),
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Êàª„Çã"
                        )
                    }
                }
            )
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(32.dp))

            // „Ç¢„Éó„É™„Ç¢„Ç§„Ç≥„É≥Ôºà„Ç§„Éº„Çπ„Çø„Éº„Ç®„ÉÉ„Ç∞ÂØæÂøúÔºâ
            Image(
                painter = painterResource(id = R.drawable.app_icon_full),
                contentDescription = "OneLine „Ç¢„Éó„É™„Ç¢„Ç§„Ç≥„É≥",
                modifier = Modifier
                    .size(120.dp)
                    .scale(scale)
                    .clip(RoundedCornerShape(24.dp))
                    .clickable(
                        interactionSource = interactionSource,
                        indication = null
                    ) {
                        tapCount++
                        if (tapCount >= 7) {
                            // ÈñãÁô∫ËÄÖ„É¢„Éº„Éâ„ÅÆ„Éà„Ç∞„É´
                            scope.launch {
                                settingsManager.setDeveloperMode(!isDeveloperMode)
                                val message = if (!isDeveloperMode) {
                                    "üîß ÈñãÁô∫ËÄÖ„É¢„Éº„Éâ„ÅåÊúâÂäπ„Å´„Å™„Çä„Åæ„Åó„Åü"
                                } else {
                                    "ÈñãÁô∫ËÄÖ„É¢„Éº„Éâ„ÅåÁÑ°Âäπ„Å´„Å™„Çä„Åæ„Åó„Åü"
                                }
                                snackbarHostState.showSnackbar(
                                    message = message,
                                    duration = SnackbarDuration.Short
                                )
                                tapCount = 0
                            }
                        }
                    },
                contentScale = ContentScale.Crop
            )

            // „Çø„ÉÉ„ÉóÂõûÊï∞„ÅÆ„Éí„É≥„ÉàË°®Á§∫Ôºà5Âõû‰ª•‰∏ä„Çø„ÉÉ„Éó„Åó„Åü„ÇâË°®Á§∫Ôºâ
            if (tapCount in 5..6) {
                Text(
                    text = "„ÅÇ„Å®${7 - tapCount}Âõû...",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.primary.copy(alpha = 0.6f)
                )
            }

            // „Ç¢„Éó„É™Âêç
            Text(
                text = "OneLine",
                style = MaterialTheme.typography.headlineMedium,
                color = MaterialTheme.colorScheme.primary
            )

            // „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±
            Text(
                text = "„Éê„Éº„Ç∏„Éß„É≥ 1.0.0",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )

            Spacer(modifier = Modifier.height(16.dp))

            // „Ç¢„Éó„É™Ë™¨Êòé
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "OneLine„Å´„Å§„ÅÑ„Å¶",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "OneLine„ÅØ„ÄÅÊâãËªΩ„Å´Êó•Ë®ò„ÇíÊõ∏„Åè„Åì„Å®„ÇíÁõÆÁöÑ„Å®„Åó„ÅüÊó•Ë®ò„Ç¢„Éó„É™„Åß„Åô„ÄÇ\n\nÂøô„Åó„ÅÑÊØéÊó•„ÅÆ‰∏≠„ÅßÂøò„Çå„Å¶„Åó„Åæ„ÅÑ„Åå„Å°„Å™„ÄÅ‰Ωï„Åß„ÇÇ„Å™„ÅÑ„Åß„Åç„Åî„Å®„ÇíÁ∞°Âçò„Å´Êõ∏„ÅçÁïô„ÇÅ„Å¶ÊåØ„ÇäËøî„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\nÁâ©ÁêÜÁöÑ„Å™Êó•Ë®ò„Å®ÈÅï„ÅÑ„ÄÅË≤∑„ÅÑÊõø„Åà„ÇÑË®òÂÖ•Âøò„Çå„ÅÆÂøÉÈÖç„Åå„Å™„Åè„ÄÅ‰ªñ„ÅÆÊó•Ë®ò„Çµ„Éº„Éì„Çπ„Å®ÈÅï„ÅÑ„ÄÅ„Éá„Éº„Çø„ÇíÂÆåÂÖ®„Å´Ëá™ÂàÜ„ÅßÁÆ°ÁêÜ„Åß„Åç„Åæ„Åô„ÄÇÁ´ØÊú´ÂÜÖ„Åæ„Åü„ÅØGit„É™„Éù„Ç∏„Éà„É™„Å´‰øùÂ≠ò„Åô„Çã„Åì„Å®„Åß„ÄÅÂÆåÂÖ®„Å´„Éó„É©„Ç§„Éô„Éº„Éà„Å´‰øùÁÆ°„Åß„Åç„Åæ„Åô„ÄÇ",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            // Ê©üËÉΩ‰∏ÄË¶ß
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "‰∏ª„Å™Ê©üËÉΩ",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.height(12.dp))

                    val features = listOf(
                        "„Ç∑„É≥„Éó„É´„Å™Êó•Ë®ò‰ΩúÊàê„ÉªÁ∑®ÈõÜ",
                        "GitHub„É™„Éù„Ç∏„Éà„É™„Å®„ÅÆËá™ÂãïÂêåÊúü",
                        "ÊØéÊó•„ÅÆ„É™„Éû„Ç§„É≥„ÉÄ„ÉºÈÄöÁü•",
                        "„Éõ„Éº„É†ÁîªÈù¢„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà",
                        "„Éó„É©„Ç§„Éô„Éº„Éà„É™„Éù„Ç∏„Éà„É™ÂØæÂøú"
                    )

                    features.forEach { feature ->
                        Row(
                            modifier = Modifier.padding(vertical = 4.dp),
                            verticalAlignment = Alignment.Top
                        ) {
                            Text(
                                text = "‚Ä¢ ",
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.primary
                            )
                            Text(
                                text = feature,
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.weight(1f)
                            )
                        }
                    }
                }
            }

            // „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±
            Card(
                onClick = {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(repositoryUrl))
                    context.startActivity(intent)
                },
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = "GitHub„É™„Éù„Ç∏„Éà„É™",
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.primary
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = "„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„ÅÆÈñ≤Ë¶ß„ÄÅIssueÂ†±Âëä„ÄÅ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÅØ„Åì„Å°„Çâ„Åã„Çâ",
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                    Icon(
                        imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,
                        contentDescription = "„É™„Éù„Ç∏„Éà„É™„ÇíÈñã„Åè",
                        tint = MaterialTheme.colorScheme.primary
                    )
                }
            }

            // „É©„Ç§„Çª„É≥„ÇπÊÉÖÂ†±
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "„É©„Ç§„Çª„É≥„Çπ",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.primary
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "„Åì„ÅÆ„Ç¢„Éó„É™„ÅØ MIT License „ÅÆ‰∏ã„ÅßÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Çã„Ç™„Éº„Éó„É≥„ÇΩ„Éº„Çπ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Åß„Åô„ÄÇ\n\nË©≥Á¥∞„Å™„É©„Ç§„Çª„É≥„ÇπÊÉÖÂ†±„ÇÑ‰ΩøÁî®„Åó„Å¶„ÅÑ„Çã„É©„Ç§„Éñ„É©„É™„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅGitHub„É™„Éù„Ç∏„Éà„É™„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }

            Spacer(modifier = Modifier.height(32.dp))

            // „Éï„ÉÉ„Çø„Éº
            Text(
                text = "¬© 2025 OneLine",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                textAlign = TextAlign.Center
            )
        }
    }

    // „Ç§„Éº„Çπ„Çø„Éº„Ç®„ÉÉ„Ç∞„ÉÄ„Ç§„Ç¢„É≠„Ç∞
    if (showEasterEgg) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            // ÂçäÈÄèÊòé„ÅÆËÉåÊôØ„Ç™„Éº„Éê„Éº„É¨„Ç§
            Surface(
                modifier = Modifier
                    .fillMaxSize()
                    .clickable(
                        interactionSource = interactionSource,
                        indication = null
                    ) {
                        showEasterEgg = false
                        tapCount = 0
                    },
                color = MaterialTheme.colorScheme.surface.copy(alpha = 0.95f)
            ) {}

            // „Ç§„Éº„Çπ„Çø„Éº„Ç®„ÉÉ„Ç∞„Ç´„Éº„Éâ
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(32.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 16.dp)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(24.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    val composition by rememberLottieComposition(
                        LottieCompositionSpec.RawRes(R.raw.the_birds_of_heart_valley_no_strings)
                    )
                    val progress by animateLottieCompositionAsState(
                        composition = composition,
                        iterations = LottieConstants.IterateForever
                    )

                    LottieAnimation(
                        composition = composition,
                        progress = { progress },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(250.dp)
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    Text(
                        text = "üéâ Èö†„ÅóË¶ÅÁ¥†Áô∫Ë¶ãÔºÅ",
                        style = MaterialTheme.typography.headlineMedium,
                        color = MaterialTheme.colorScheme.primary,
                        textAlign = TextAlign.Center
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    Text(
                        text = "OneLine„Çí‰Ωø„Å£„Å¶„Åè„Çå„Å¶„ÅÇ„Çä„Åå„Å®„ÅÜÔºÅ\n\nÊØéÊó•„ÅÆÂ∞è„Åï„Å™Áû¨Èñì„ÇíÂ§ßÂàá„Å´Ë®òÈå≤„Åó„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ",
                        style = MaterialTheme.typography.bodyLarge,
                        textAlign = TextAlign.Center,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    Button(
                        onClick = {
                            showEasterEgg = false
                            tapCount = 0
                        }
                    ) {
                        Text("Èñâ„Åò„Çã")
                    }
                }
            }
        }
    }
}
